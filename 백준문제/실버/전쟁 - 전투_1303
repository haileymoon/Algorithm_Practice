from collections import deque

n, m = map(int, input().split())
graph = [list(input()) for _ in range(m)]
visited = [[False for _ in range(n)] for _ in range(m)]

def bfs(loc_x, loc_y):    
    queue = deque()
    queue.append((loc_x, loc_y))

    dx = [1, -1, 0, 0]
    dy = [0, 0, -1, 1]
    count = 1

    while queue:
        x, y = queue.pop()
        visited[x][y] = True
        for i in range(4):
            new_x = x + dx[i]
            new_y = y + dy[i]
            if 0 <= new_x < m and 0 <= new_y < n:
                if graph[x][y] == graph[new_x][new_y] and not visited[new_x][new_y]:
                    visited[new_x][new_y] = True
                    queue.append((new_x, new_y))
                    count += 1
        
    return count

W = 0
B = 0
for i in range(m):
    for j in range(n):
        if visited[i][j] == True:
            continue
        else:
            letter = graph[i][j]
            result = bfs(i,j)
            if letter == "W":
                W += result**2
            else:
                B += result**2

print(W, B)

from collections import deque
n, m = map(int, input().split())
graph = []
enemy = 0
my_team = 0
visited = [[False] * n for _ in range(m)]
for _ in range(m):
    graph.append(list(input()))
dx = [1,-1,0,0]
dy = [0,0,1,-1]

def bfs(x, y, visited):
    queue = deque()
    queue.append((x,y))
    count = 1
    while queue:
        x, y = queue.popleft()
        visited[x][y] = True
        for i in range(4):
            nx = x+dx[i]
            ny = y+dy[i]
            if nx < 0 or ny <0 or nx >= m or ny >= n:
                continue
            if graph[nx][ny] == graph[x][y] and not visited[nx][ny]:
                visited[nx][ny] = True
                queue.append((nx,ny))
                count += 1
    return count ** 2

for i in range(m):
    for j in range(n):
        #방문하지 않았을때
        if not visited[i][j]:
            if graph[i][j] == "B":
                enemy += bfs(i, j, visited)
            if graph[i][j] == "W":
                my_team += bfs(i, j, visited)
print(my_team, enemy)

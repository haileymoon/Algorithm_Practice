from collections import deque
n = int(input())
visited = [[False]*n for _ in range(n)]
graph = []
people = []
count = 0
dx = [0, 0, -1, 1]
dy = [-1, 1, 0, 0]

for _ in range(n):
    graph.append(list(map(int, input())))

def bfs(row, column, visited):
    global graph
    count = 0
    queue = deque()
    queue.append((row, column))
    while queue:
        x,y = queue.popleft()
        visited[x][y] = True
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]
            if nx < 0 or nx >= n or ny <0 or ny >= n:
                continue
            if graph[nx][ny] == 1 and not visited[nx][ny]:
                visited[nx][ny] = True
                queue.append((nx, ny))
        count += 1
    return count

for i in range(n):
    for j in range(n):
        if graph[i][j] == 1 and not visited[i][j]:
            people.append(bfs(i,j,visited))
            count += 1
print(count)
people.sort()
for p in people:
    print(p)

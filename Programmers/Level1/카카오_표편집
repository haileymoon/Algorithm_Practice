class Node():
    def __init__(self):
        self.prev = None
        self.next = None
        self.removed = False

def solution(n,k,cmd):
    table = [Node() for _ in range(n)]
    stack = []
    for i in range(1, n):
        #노드 이어주기
        table[i-1].next = table[i]
        table[i].prev = table[i-1]
    node_now = table[k]
    for c in cmd:
        if c[0] == "U":
            num = int(c[2:])
            for _ in range(num):
                node_now = node_now.prev
        elif c[0] == "D":
            num = int(c[2:])
            for _ in range(num):
                node_now = node_now.next
        elif c[0] == "C":
            stack.append(node_now)
            node_now.removed = True
            up = node_now.prev
            down = node_now.next 
            # prev(up)가 None이 아닌걸 확인, 즉, 마지막이 아닐때        
            if up is not None:
                up.next = down
            if down is not None:
                down.prev = up
                node_now = down                
            else:
                up.next = None # 사실 첫 if에서 걸러지기 때문에 안넣어도 됨
                node_now = up
            # 아래가 틀린 이유는 만약 array에 하나의 node만 있을 때 up이랑 down 둘다 None일 수도 있기에
            # if down is not None:
            #     up.next = down
            #     down.prev = up
            #     node_now = down
            # else:
            #     up.next = None
            #     node_now = up
        else: #Z인 경우
            old_node = stack.pop()
            old_node.removed = False
            up = old_node.prev
            down = old_node.next
            if up is not None:
                up.next = old_node
            if down is not None:
                down.prev = old_node
    answer = ""
    for node in table:
        if node.removed:
            answer += "X"
        else:
            answer += "O"
    return answer
